{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","servesers/MarvelService.js","hooks/http.hooks.js","components/errorBoundary/ErrorBoundary.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiKey","_apiBase","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getComics","comics","title","description","pageCount","thumbnail","path","extension","language","textObjects","price","prices","char","name","slice","homepage","urls","wiki","items","ErrorBoundary","props","state","errorInfo","console","log","this","setState","children","Component","View","imgStyle","className","href","RandomChar","setChar","load","setLoad","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","CSSTransition","classNames","in","timeout","mountOnEnter","unmountOnExit","onClick","mjolnir","CharList","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","i","nodeRef","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","obj","logger","catch","disabled","Skeleton","to","resourceURI","lastIndexOf","CharInfo","charId","skeleton","MainPage","selectedChar","decoration"],"mappings":"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","file":"static/js/4.171327b7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from \"./error.gif\"\n\nconst ErrorMessage=()=>{\n  return(\n    <img style={{display:\"block\", width:\"250px\",height:\"250px\", objectFit:\"contain\", margin:\"0 auto\"}} src={img} alt={\"error\"}/>\n  )\n}\n\nexport default ErrorMessage ","import { useHttp } from \"../hooks/http.hooks\";\n\n\nconst  useMarvelService=()=>{\n  const {loading,request,error,clearError}=useHttp()\n  const _apiKey=\"apikey=41f31bb5661e439b207d7fa69245080f\"\n  const _apiBase=\"https://gateway.marvel.com:443/v1/public/\";\n  const _baseOffest=210;\n\n\n  const getAllCharacters=async(offset = _baseOffest)=>{\n      const res= await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`)\n      return res.data.results.map(\n        _transformCharacter\n      )\n    }\n\n\n    const getCharacter = async (id) => {\n      const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n      return _transformCharacter(res.data.results[0]);\n  }\n\n const getAllComics=async (offset=0)=>{\n    const res=await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`)\n    return res.data.results.map(_transformComics)\n  } \n\n  const getComics = async (id) => {\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n    return _transformComics(res.data.results[0]);\n}\n\n\n  const _transformComics=(comics)=>{\n    return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            language: comics.textObjects.language || 'en-us',\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\n\n    }\n  }\n\n\n\n  const _transformCharacter=(char)=>{\n    \n    return {\n      id:char.id,\n      name: char.name,\n      description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics:char.comics.items\n    }\n  }\n  return {loading,error,getAllCharacters,getCharacter,clearError,getAllComics,getComics}\n}\n\nexport default useMarvelService","import { useState,useCallback } from \"react\";\n\nexport const useHttp=()=>{\n  const [loading,setLoading] = useState(false);\n  const [error,setError] = useState(null);\n\n\n  const request=useCallback(async (url, method=\"GET\", body=null,headers={'Content-Type':'application/json'})=>{\n\n    setLoading(true);\n\n    try{\n        const response=await fetch(url,{method,body,headers});\n        if(!response.ok){\n          throw new Error(`could not ferch ${url}, status: ${response.status}`)\n        }\n        const data=await response.json();\n        setLoading(false)\n        return data\n    } catch(e){\n        setLoading(false)\n        setError(e.message)\n        throw e\n    }\n\n  },[])\n  const clearError=useCallback(()=>setError(null),[])\n  return {loading, request, error, clearError}\n\n}","import { Component } from \"react/cjs/react.production.min\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\n\nclass ErrorBoundary extends Component{\n  constructor(props){\n    super(props)\n    this.state={\n      error:false\n    }\n  }\n\n  componentDidCatch(error, errorInfo){\n    console.log(error, errorInfo);\n    this.setState({\n      error:true\n    })\n  }\n  render(){\n    if(this.state.error){\n      return <ErrorMessage/>\n    }\n    \n    return  this.props.children;\n  }\n      \n}\n\n\n\nexport default ErrorBoundary","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","\nimport {useState, useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../servesers/MarvelService';\nimport { CSSTransition } from 'react-transition-group';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n    const [load,setLoad]=useState(false)\n\n    const {loading,error,getCharacter,clearError} =  useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n        setLoad(true)\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n\n\n    const updateChar = () => {\n        clearError()\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded)\n          \n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <CSSTransition \n        classNames={\"randomchar\"}\n        in={load}\n        timeout={500}\n        mountOnEnter\n        unmountOnExit\n        >\n             <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n        </CSSTransition>\n       \n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useRef, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../servesers/MarvelService';\nimport './charList.scss';\nimport propTypes  from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\n\nconst CharList =(props)=> {\n\n    const [charList,setCharList] = useState([])\n    const [newItemLoading,setNewItemLoading] = useState(false)\n    const [offset,setOffset] = useState(210)\n    const [charEnded,setCharEnded] = useState(false)\n\n    \n    const {loading, error, getAllCharacters} =  useMarvelService();\n\n    useEffect(()=>{\n          onRequest(offset,true) \n      \n    },[])\n\n  \n\n    const onRequest=(offset,initial)=>{\n        if(initial){\n            setNewItemLoading(false) \n        }else setNewItemLoading(true)\n       \n        getAllCharacters(offset)\n                            .then(onCharListLoaded)\n                           \n    }\n\n    \n\n\n    const onCharListLoaded = (newCharList) => {\n        \n        let ended =false;\n        if(newCharList.length<9){\n            ended=true\n        }\n\n        setCharList(charList=>[...charList, ...newCharList ])\n      \n        setNewItemLoading(newItemLoading=>false)\n        setOffset(offset=>offset+9)\n        setCharEnded(charEnded=>ended)\n    }\n\n  \n\n    const itemRefs = useRef([])\n\n\n    const focusOnItem = (id) => {\n        // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n        // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n        // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n        // в отдельный компонент. Но кода будет больше, появится новое состояние\n        // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n\n        // По возможности, не злоупотребляйте рефами, только в крайних случаях\n        itemRefs.current.forEach(item => {\n            if(item){\n                item.classList.remove('char__item_selected')\n            }\n            });\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n  \n    function renderItems(arr) {\n       \n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition \n                nodeRef={itemRefs.current[i]}\n                timeout={500}\n                classNames=\"char__item\"\n                key={item.id}\n                >\n               \n\n               \n                <li \n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={(el=>itemRefs.current[i]=el)}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n                </CSSTransition>\n                \n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup \n                    component={null}\n                    > \n                    {items}\n                </TransitionGroup>\n        \n\n               \n            </ul>\n        )\n    }\n\n  \n\n\n        \n        const items = renderItems(charList);\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n\n        if(loading){\n            import('./someFunc')\n                    .then(obj=>obj.logger())\n                    .catch(()=>console.log('err'))\n        }\n\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {items}\n \n                <button \n                    className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{'display': charEnded ? 'none' : 'block'}}\n                    onClick={() => onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    \n}\n\nCharList.propTypes = {\n    onCharSelected: propTypes.func.isRequired\n}\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport useMarvelService from '../../servesers/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n   \n    const {loading,error,getCharacter,clearError} =  useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    const updateChar = () => {\n        clearError()\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n       \n        getCharacter(charId)\n            .then(onCharLoaded)\n           \n    }\n\n    const onCharLoaded = (char) => {\n     \n        setChar(char);\n    }\n\n\n   \n\n    const skeleton = char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        /* console.log(item.resourceURI.slice(item.resourceURI.length-5)); */\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <Link to={`/MarvelStarter/comics/${item.resourceURI.slice(item.resourceURI.lastIndexOf(\"/\")+1)}`} key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </Link>\n                        )\n                    })\n                }                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }\n\n    return (\n        <>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <ErrorBoundary>\n                    <CharInfo charId={selectedChar}/>\n                </ErrorBoundary>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;"],"sourceRoot":""}